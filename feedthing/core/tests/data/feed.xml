<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/rss2full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.doughellmann.com/~d/styles/itemcontent.css"?><rss xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0" version="2.0">

<channel>
	<title>PyMOTW – Doug Hellmann</title>
	
	<link>https://doughellmann.com/blog</link>
	<description>Python, OpenStack, and Open Source</description>
	<lastBuildDate>Mon, 01 May 2017 13:00:06 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.7.4</generator>
	<atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/rss+xml" href="http://feeds.doughellmann.com/PyMOTW" /><feedburner:info uri="pymotw" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><feedburner:emailServiceId>PyMOTW</feedburner:emailServiceId><feedburner:feedburnerHostname>https://feedburner.google.com</feedburner:feedburnerHostname><item>
		<title>venv — Create Virtual Environments — PyMOTW 3</title>
		<link>http://feeds.doughellmann.com/~r/PyMOTW/~3/3KXkQfZ481Q/</link>
		<pubDate>Mon, 01 May 2017 13:00:06 +0000</pubDate>
		<dc:creator><![CDATA[doug]]></dc:creator>
				<category><![CDATA[Posts]]></category>
		<category><![CDATA[PyMOTW]]></category>
		<category><![CDATA[python]]></category>

		<guid isPermaLink="false">https://doughellmann.com/blog/?p=4238</guid>
		<description>Python virtual environments are set up for installing packages and running programs in a way that isolates them from other packages installed on the rest of the system. Because each environment has its own interpreter executable and directory for installing packages, it is easy to create environments configured with various combinations of Python and package &amp;#8230; &lt;a href="https://doughellmann.com/blog/2017/05/01/venv-create-virtual-environments-pymotw-3/" class="more-link"&gt;Continue reading &lt;span class="screen-reader-text"&gt;venv — Create Virtual Environments — PyMOTW 3&lt;/span&gt;&lt;/a&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.doughellmann.com/~ff/PyMOTW?a=3KXkQfZ481Q:UWoug2hc_ic:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/PyMOTW?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.doughellmann.com/~ff/PyMOTW?a=3KXkQfZ481Q:UWoug2hc_ic:bcOpcFrp8Mo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/PyMOTW?d=bcOpcFrp8Mo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.doughellmann.com/~ff/PyMOTW?a=3KXkQfZ481Q:UWoug2hc_ic:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/PyMOTW?i=3KXkQfZ481Q:UWoug2hc_ic:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/PyMOTW/~4/3KXkQfZ481Q" height="1" width="1" alt=""/&gt;</description>
		<feedburner:origLink>https://doughellmann.com/blog/2017/05/01/venv-create-virtual-environments-pymotw-3/</feedburner:origLink></item>
		<item>
		<title>zlib — GNU zlib Compression — PyMOTW 3</title>
		<link>http://feeds.doughellmann.com/~r/PyMOTW/~3/AmidE_L-_V0/</link>
		<pubDate>Mon, 24 Apr 2017 13:00:44 +0000</pubDate>
		<dc:creator><![CDATA[doug]]></dc:creator>
				<category><![CDATA[Posts]]></category>
		<category><![CDATA[PyMOTW]]></category>
		<category><![CDATA[python]]></category>

		<guid isPermaLink="false">https://doughellmann.com/blog/?p=4235</guid>
		<description>The zlib module provides a lower-level interface to many of the functions in the zlib compression library from the GNU project. Read more&amp;#8230; This post is part of the Python Module of the Week series for Python 3. See PyMOTW.com for more articles from the series.&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.doughellmann.com/~ff/PyMOTW?a=AmidE_L-_V0:5hIyWnCxYNQ:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/PyMOTW?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.doughellmann.com/~ff/PyMOTW?a=AmidE_L-_V0:5hIyWnCxYNQ:bcOpcFrp8Mo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/PyMOTW?d=bcOpcFrp8Mo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.doughellmann.com/~ff/PyMOTW?a=AmidE_L-_V0:5hIyWnCxYNQ:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/PyMOTW?i=AmidE_L-_V0:5hIyWnCxYNQ:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/PyMOTW/~4/AmidE_L-_V0" height="1" width="1" alt=""/&gt;</description>
		<feedburner:origLink>https://doughellmann.com/blog/2017/04/24/zlib-gnu-zlib-compression-pymotw-3/</feedburner:origLink></item>
		<item>
		<title>xml.etree.ElementTree — XML Manipulation API — PyMOTW 3</title>
		<link>http://feeds.doughellmann.com/~r/PyMOTW/~3/qyXOpAheyRs/</link>
		<pubDate>Mon, 17 Apr 2017 13:00:38 +0000</pubDate>
		<dc:creator><![CDATA[doug]]></dc:creator>
				<category><![CDATA[Posts]]></category>
		<category><![CDATA[PyMOTW]]></category>
		<category><![CDATA[python]]></category>

		<guid isPermaLink="false">https://doughellmann.com/blog/?p=4232</guid>
		<description>The ElementTree library includes tools for parsing XML using event-based and document-based APIs, searching parsed documents with XPath expressions, and creating new or modifying existing documents. Read more&amp;#8230; This post is part of the Python Module of the Week series for Python 3. See PyMOTW.com for more articles from the series.&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.doughellmann.com/~ff/PyMOTW?a=qyXOpAheyRs:3Omd6XvtbMA:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/PyMOTW?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.doughellmann.com/~ff/PyMOTW?a=qyXOpAheyRs:3Omd6XvtbMA:bcOpcFrp8Mo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/PyMOTW?d=bcOpcFrp8Mo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.doughellmann.com/~ff/PyMOTW?a=qyXOpAheyRs:3Omd6XvtbMA:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/PyMOTW?i=qyXOpAheyRs:3Omd6XvtbMA:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/PyMOTW/~4/qyXOpAheyRs" height="1" width="1" alt=""/&gt;</description>
		<feedburner:origLink>https://doughellmann.com/blog/2017/04/17/xml-etree-elementtree-xml-manipulation-api-pymotw-3/</feedburner:origLink></item>
		<item>
		<title>weakref — Impermanent References to Objects — PyMOTW 3</title>
		<link>http://feeds.doughellmann.com/~r/PyMOTW/~3/Bvv4lYVuLzc/</link>
		<pubDate>Mon, 10 Apr 2017 13:00:18 +0000</pubDate>
		<dc:creator><![CDATA[doug]]></dc:creator>
				<category><![CDATA[Posts]]></category>
		<category><![CDATA[PyMOTW]]></category>
		<category><![CDATA[python]]></category>

		<guid isPermaLink="false">https://doughellmann.com/blog/?p=4229</guid>
		<description>The weakref module supports weak references to objects. A normal reference increments the reference count on the object and prevents it from being garbage collected. This is not always desirable, either when a circular reference might be present or when building a cache of objects that should be deleted when memory is needed. A weak &amp;#8230; &lt;a href="https://doughellmann.com/blog/2017/04/10/weakref-impermanent-references-to-objects-pymotw-3/" class="more-link"&gt;Continue reading &lt;span class="screen-reader-text"&gt;weakref — Impermanent References to Objects — PyMOTW 3&lt;/span&gt;&lt;/a&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.doughellmann.com/~ff/PyMOTW?a=Bvv4lYVuLzc:BEicgE2SrtQ:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/PyMOTW?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.doughellmann.com/~ff/PyMOTW?a=Bvv4lYVuLzc:BEicgE2SrtQ:bcOpcFrp8Mo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/PyMOTW?d=bcOpcFrp8Mo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.doughellmann.com/~ff/PyMOTW?a=Bvv4lYVuLzc:BEicgE2SrtQ:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/PyMOTW?i=Bvv4lYVuLzc:BEicgE2SrtQ:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/PyMOTW/~4/Bvv4lYVuLzc" height="1" width="1" alt=""/&gt;</description>
		<feedburner:origLink>https://doughellmann.com/blog/2017/04/10/weakref-impermanent-references-to-objects-pymotw-3/</feedburner:origLink></item>
		<item>
		<title>profile and pstats — Performance Analysis — PyMOTW 3</title>
		<link>http://feeds.doughellmann.com/~r/PyMOTW/~3/BuQxE8nxfjk/</link>
		<pubDate>Mon, 03 Apr 2017 13:00:13 +0000</pubDate>
		<dc:creator><![CDATA[doug]]></dc:creator>
				<category><![CDATA[Posts]]></category>
		<category><![CDATA[PyMOTW]]></category>
		<category><![CDATA[python]]></category>

		<guid isPermaLink="false">https://doughellmann.com/blog/?p=4226</guid>
		<description>The profile module provides APIs for collecting and analyzing statistics about how Python source consumes processor resources. Read more&amp;#8230; This post is part of the Python Module of the Week series for Python 3. See PyMOTW.com for more articles from the series.&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.doughellmann.com/~ff/PyMOTW?a=BuQxE8nxfjk:wa3SdZkIReQ:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/PyMOTW?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.doughellmann.com/~ff/PyMOTW?a=BuQxE8nxfjk:wa3SdZkIReQ:bcOpcFrp8Mo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/PyMOTW?d=bcOpcFrp8Mo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.doughellmann.com/~ff/PyMOTW?a=BuQxE8nxfjk:wa3SdZkIReQ:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/PyMOTW?i=BuQxE8nxfjk:wa3SdZkIReQ:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/PyMOTW/~4/BuQxE8nxfjk" height="1" width="1" alt=""/&gt;</description>
		<feedburner:origLink>https://doughellmann.com/blog/2017/04/03/profile-and-pstats-performance-analysis-pymotw-3/</feedburner:origLink></item>
		<item>
		<title>locale — Cultural Localization API — PyMOTW 3</title>
		<link>http://feeds.doughellmann.com/~r/PyMOTW/~3/--s5xrGwFFY/</link>
		<pubDate>Mon, 27 Mar 2017 13:00:57 +0000</pubDate>
		<dc:creator><![CDATA[doug]]></dc:creator>
				<category><![CDATA[Posts]]></category>
		<category><![CDATA[PyMOTW]]></category>
		<category><![CDATA[python]]></category>

		<guid isPermaLink="false">https://doughellmann.com/blog/?p=4223</guid>
		<description>The locale module is part of Python’s internationalization and localization support library. It provides a standard way to handle operations that may depend on the language or location of a user. For example, it handles formatting numbers as currency, comparing strings for sorting, and working with dates. It does not cover translation (see the gettext &amp;#8230; &lt;a href="https://doughellmann.com/blog/2017/03/27/locale-cultural-localization-api-pymotw-3/" class="more-link"&gt;Continue reading &lt;span class="screen-reader-text"&gt;locale — Cultural Localization API — PyMOTW 3&lt;/span&gt;&lt;/a&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.doughellmann.com/~ff/PyMOTW?a=--s5xrGwFFY:NRqjfYZB6wU:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/PyMOTW?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.doughellmann.com/~ff/PyMOTW?a=--s5xrGwFFY:NRqjfYZB6wU:bcOpcFrp8Mo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/PyMOTW?d=bcOpcFrp8Mo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.doughellmann.com/~ff/PyMOTW?a=--s5xrGwFFY:NRqjfYZB6wU:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/PyMOTW?i=--s5xrGwFFY:NRqjfYZB6wU:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/PyMOTW/~4/--s5xrGwFFY" height="1" width="1" alt=""/&gt;</description>
		<feedburner:origLink>https://doughellmann.com/blog/2017/03/27/locale-cultural-localization-api-pymotw-3/</feedburner:origLink></item>
		<item>
		<title>heapq – Heap Sort Algorithm — PyMOTW 3</title>
		<link>http://feeds.doughellmann.com/~r/PyMOTW/~3/5aOG-Mo4Hy0/</link>
		<pubDate>Mon, 20 Mar 2017 13:00:41 +0000</pubDate>
		<dc:creator><![CDATA[doug]]></dc:creator>
				<category><![CDATA[Posts]]></category>
		<category><![CDATA[PyMOTW]]></category>
		<category><![CDATA[python]]></category>

		<guid isPermaLink="false">https://doughellmann.com/blog/?p=4220</guid>
		<description>A heap is a tree-like data structure where the child nodes have a sort-order relationship with the parents. Binary heaps can be represented using a list or array organized so that the children of element N are at positions 2*N+1 and 2*N+2 (for zero-based indexes). This layout makes it possible to rearrange heaps in place, &amp;#8230; &lt;a href="https://doughellmann.com/blog/2017/03/20/heapq-heap-sort-algorithm-pymotw-3/" class="more-link"&gt;Continue reading &lt;span class="screen-reader-text"&gt;heapq – Heap Sort Algorithm — PyMOTW 3&lt;/span&gt;&lt;/a&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.doughellmann.com/~ff/PyMOTW?a=5aOG-Mo4Hy0:_ao8bZQjRsU:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/PyMOTW?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.doughellmann.com/~ff/PyMOTW?a=5aOG-Mo4Hy0:_ao8bZQjRsU:bcOpcFrp8Mo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/PyMOTW?d=bcOpcFrp8Mo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.doughellmann.com/~ff/PyMOTW?a=5aOG-Mo4Hy0:_ao8bZQjRsU:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/PyMOTW?i=5aOG-Mo4Hy0:_ao8bZQjRsU:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/PyMOTW/~4/5aOG-Mo4Hy0" height="1" width="1" alt=""/&gt;</description>
		<feedburner:origLink>https://doughellmann.com/blog/2017/03/20/heapq-heap-sort-algorithm-pymotw-3/</feedburner:origLink></item>
		<item>
		<title>operator — Functional Interface to Built-in Operators — PyMOTW 3</title>
		<link>http://feeds.doughellmann.com/~r/PyMOTW/~3/YFcx3oGmpe0/</link>
		<pubDate>Mon, 13 Mar 2017 13:00:22 +0000</pubDate>
		<dc:creator><![CDATA[doug]]></dc:creator>
				<category><![CDATA[Posts]]></category>
		<category><![CDATA[PyMOTW]]></category>
		<category><![CDATA[python]]></category>

		<guid isPermaLink="false">https://doughellmann.com/blog/?p=4217</guid>
		<description>Programming using iterators occasionally requires creating small functions for simple expressions. Sometimes, these can be implemented as lambda functions, but for some operations new functions are not needed at all. The operator module defines functions that correspond to built-in operations for arithmetic, comparison, and other operations corresponding to standard object APIs. Read more&amp;#8230; This post &amp;#8230; &lt;a href="https://doughellmann.com/blog/2017/03/13/operator-functional-interface-to-built-in-operators-pymotw-3/" class="more-link"&gt;Continue reading &lt;span class="screen-reader-text"&gt;operator — Functional Interface to Built-in Operators — PyMOTW 3&lt;/span&gt;&lt;/a&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.doughellmann.com/~ff/PyMOTW?a=YFcx3oGmpe0:2ahYp5a7-lk:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/PyMOTW?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.doughellmann.com/~ff/PyMOTW?a=YFcx3oGmpe0:2ahYp5a7-lk:bcOpcFrp8Mo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/PyMOTW?d=bcOpcFrp8Mo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.doughellmann.com/~ff/PyMOTW?a=YFcx3oGmpe0:2ahYp5a7-lk:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/PyMOTW?i=YFcx3oGmpe0:2ahYp5a7-lk:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/PyMOTW/~4/YFcx3oGmpe0" height="1" width="1" alt=""/&gt;</description>
		<feedburner:origLink>https://doughellmann.com/blog/2017/03/13/operator-functional-interface-to-built-in-operators-pymotw-3/</feedburner:origLink></item>
		<item>
		<title>pickle — Object Serialization — PyMOTW 3</title>
		<link>http://feeds.doughellmann.com/~r/PyMOTW/~3/GlEg_zF9U8w/</link>
		<pubDate>Mon, 06 Mar 2017 14:00:52 +0000</pubDate>
		<dc:creator><![CDATA[doug]]></dc:creator>
				<category><![CDATA[Posts]]></category>
		<category><![CDATA[PyMOTW]]></category>
		<category><![CDATA[python]]></category>

		<guid isPermaLink="false">https://doughellmann.com/blog/?p=4214</guid>
		<description>The pickle module implements an algorithm for turning an arbitrary Python object into a series of bytes. This process is also called serializing the object. The byte stream representing the object can then be transmitted or stored, and later reconstructed to create a new object with the same characteristics. Read more&amp;#8230; This post is part &amp;#8230; &lt;a href="https://doughellmann.com/blog/2017/03/06/pickle-object-serialization-pymotw-3/" class="more-link"&gt;Continue reading &lt;span class="screen-reader-text"&gt;pickle — Object Serialization — PyMOTW 3&lt;/span&gt;&lt;/a&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.doughellmann.com/~ff/PyMOTW?a=GlEg_zF9U8w:GVTCd8B-HbA:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/PyMOTW?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.doughellmann.com/~ff/PyMOTW?a=GlEg_zF9U8w:GVTCd8B-HbA:bcOpcFrp8Mo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/PyMOTW?d=bcOpcFrp8Mo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.doughellmann.com/~ff/PyMOTW?a=GlEg_zF9U8w:GVTCd8B-HbA:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/PyMOTW?i=GlEg_zF9U8w:GVTCd8B-HbA:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/PyMOTW/~4/GlEg_zF9U8w" height="1" width="1" alt=""/&gt;</description>
		<feedburner:origLink>https://doughellmann.com/blog/2017/03/06/pickle-object-serialization-pymotw-3/</feedburner:origLink></item>
		<item>
		<title>os — Portable access to operating system specific features — PyMOTW 3</title>
		<link>http://feeds.doughellmann.com/~r/PyMOTW/~3/RML1G0tUbEA/</link>
		<pubDate>Mon, 27 Feb 2017 14:00:08 +0000</pubDate>
		<dc:creator><![CDATA[doug]]></dc:creator>
				<category><![CDATA[Posts]]></category>
		<category><![CDATA[PyMOTW]]></category>
		<category><![CDATA[python]]></category>

		<guid isPermaLink="false">https://doughellmann.com/blog/?p=4207</guid>
		<description>The os module provides a wrapper for platform specific modules such as posix , nt , and mac . The API for functions available on all platforms should be the same, so using the os module offers some measure of portability. Read more&amp;#8230; This post is part of the Python Module of the Week series &amp;#8230; &lt;a href="https://doughellmann.com/blog/2017/02/27/os-portable-access-to-operating-system-specific-features-pymotw-3/" class="more-link"&gt;Continue reading &lt;span class="screen-reader-text"&gt;os — Portable access to operating system specific features — PyMOTW 3&lt;/span&gt;&lt;/a&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.doughellmann.com/~ff/PyMOTW?a=RML1G0tUbEA:ROKPzlWi_CQ:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/PyMOTW?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.doughellmann.com/~ff/PyMOTW?a=RML1G0tUbEA:ROKPzlWi_CQ:bcOpcFrp8Mo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/PyMOTW?d=bcOpcFrp8Mo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.doughellmann.com/~ff/PyMOTW?a=RML1G0tUbEA:ROKPzlWi_CQ:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/PyMOTW?i=RML1G0tUbEA:ROKPzlWi_CQ:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/PyMOTW/~4/RML1G0tUbEA" height="1" width="1" alt=""/&gt;</description>
		<feedburner:origLink>https://doughellmann.com/blog/2017/02/27/os-portable-access-to-operating-system-specific-features-pymotw-3/</feedburner:origLink></item>
	</channel>
</rss>
